package oarlib.graph.io;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;

import oarlib.core.Edge;
import oarlib.core.Graph;
import oarlib.exceptions.UnsupportedFormatException;
import oarlib.graph.impl.UndirectedGraph;
import oarlib.vertex.impl.UndirectedVertex;

/**
 * Writer to output various file formats.  Plans to use Gephi for visualization.
 * @author Oliver
 *
 */
public class GraphWriter {
	private GraphFormat.Name mFormat;
	public GraphWriter(GraphFormat.Name format)
	{
		mFormat = format;
	}
	public GraphFormat.Name getFormat()
	{
		return mFormat;
	}
	public void setFormat(GraphFormat.Name newFormat)
	{
		mFormat = newFormat;
	}
	public boolean writeGraph(Graph<?,?> g, String filename) throws UnsupportedFormatException
	{
		//TODO
		switch(mFormat)
		{
		case OARLib:
			return writeOarlibGraph(g, filename);
		case Campos:
			break;
		case Corberan:
			break;
		case DIMACS_Modified:
			break;
		case Simple:
			break;
		case Yaoyuenyong:
			break;
		case METIS:
			return writeMETISGraph(g, filename);
		default:
			break;
		}
		throw new UnsupportedFormatException("While the format seems to have been added to the Format.Name type list,"
				+ " there doesn't seem to be an appropriate write method assigned to it.  Support is planned in the future," +
				"but not currently available");
	}
	private boolean writeMETISGraph(Graph<?,?> g, String filename)
	{
		try
		{
			//only works with undirected graphs
			if(g.getClass() != UndirectedGraph.class)
				return false;
			
			UndirectedGraph g2 = (UndirectedGraph)g;
			
			PrintWriter pw = new PrintWriter(filename, "UTF-8");
			pw.println("% This is a METIS file generated by the Open Source, Arc-Routing Library (OAR Lib).");
			pw.println("% For more information on the METIS Library, or the format please visit: ");
			pw.println("% http://glaros.dtc.umn.edu/gkhome/metis/metis/overview");
			
			//the header
			int n = g.getVertices().size();
			int m = g.getEdges().size();
			String header = "";
			header = header + n + " " + m + " " + "001" + " 1";
			pw.println(header);
			
			HashMap<Integer, UndirectedVertex> indexedVertices = g2.getInternalVertexMap();
			UndirectedVertex temp;
			HashMap<UndirectedVertex, ArrayList<Edge>> tempNeighbors;
			for(int i = 1; i <= n; i++)
			{
				String line = "";
				temp = indexedVertices.get(i);
				tempNeighbors = temp.getNeighbors();
				for(UndirectedVertex neighbor : tempNeighbors.keySet())
				{
					line += neighbor.getId() + " ";
					line += tempNeighbors.get(neighbor).get(0).getCost() + " ";
					if(tempNeighbors.get(neighbor).size() > 1)
						System.out.println("Hypergraphs are not currently supported; we shall only use one of the edges connecting these vertices.");
				}
				pw.println(line);
			}
			
			pw.close();
			return false;
		} catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}
	private boolean writeOarlibGraph(Graph<?,?> g, String filename)
	{
		return false;
	}

}
